//All operations are ok with mod by both sides   , to have good equation conside b*b^-1 this didnt affect mod equations
int Div (int a  ,  int  b , int m){
                  return  (a%m * mod_inv(b)%mod) % mod;
}
int sum(int a , int b ){ // a ,b maybe negative
               return (a%mod +b%mod + mod) % mod;
}
int sub(int a , int b){ // a ,b maybe negative
               return (a%mod - b%mod + mod) % mod;
}

int power(int a, int b){

         if(b < 0) return 1;
         int res = 1;
         while(b){
                  if(b & 1) res = res * a % mod;
                  a = a * a % mod;
                  b >>= 1;
         }
         return res;
}

//Prime Mods except for mod =2   
ll modInverse(ll b, ll mod) {
    return modPow(b, mod - 2, mod); // Fermat's Little Theorem
}

for othert mods
// Extended Euclidean Algorithm
long long modInverse(long long b, long long m) {
    long long x, y;
    long long g = __gcd(b, m);
    if (g != 1) return -1; // inverse doesn't exist

    long long a = b, mod = m;
    long long u = 1, v = 0;
    while (m) {
        long long t = a / m;
        a -= t * m; swap(a, m);
        u -= t * v; swap(u, v);
    }
    return (u + mod) % mod;
}

// Compute a / b % m
long long divideMod(long long a, long long b, long long m) {
    long long inv = modInverse(b, m);
    if (inv == -1) {
        throw std::invalid_argument("No inverse exists");
    }
    return (a * inv) % m;
}

ll nPr(ll n,ll r, ll mod){
                               ll ret = 1 ;
                               for(int i=n-r+1;i<=n;++i) ret =(ret*i)%mod;
                               return ret ;

}


const int N =6e5+7 ,  mod =  1e9+7  , m = mod ;
int factorial[N];

int calc[2*N]  ;
int mod_inv(int n){        //affected by prime mods
         int &ret= calc[n] ;
         if(ret!=-1)
               return ret ;
       /////Note This not mod inv function it's orignaly passed as fact[n]  but i used n instead and dealed with fact[n]
        //cout<<ret<<" "<< n << " "<<factorial[n] <<" "<< power(factorial[n], mod - 2)<<"\n";
        return ret  = power(factorial[n], mod - 2);
}


//nCr  ,  nPr ,  n+r-1Cr
int nCr(int n, int a){
        if(n==a ||  a == 0)return 1 ; 
        if (mod == 2) {
                   return ((n & a) == a) ? 1 : 0;
        }

        if(n < a) return 0;
        int top = factorial[n];
        int bot = mod_inv(a) * mod_inv(n-a); bot %= mod;
        int res = top * bot % mod;
        return res;
}

void init(){
        factorial[0] = 1;
        calc[0] = -1 ;
        for(int i = 1 ; i < N; i++){
                 factorial[i] = factorial[i - 1] * i;
                 factorial[i] %= mod;
                 calc[i] = -1  ;
        }
}


