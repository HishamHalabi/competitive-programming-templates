/*
   صل عل محمد
   if (u == Abdel-Aziz Mostafa )   love u <3 ;
  دايما احلم ربنا المنان

*/


/*
       double erors   handling : 
             double   , int  >> long double   

              const double EPS  = 1e-9; 
              while comparing  , etc  >> consider an eror 1e-9 means the two operands equla


*/
#include<bits/stdc++.h>
using namespace std;


#define int long long

#define ld  long double

ld pi  =  3.1415926535  ;

double angle_between_sides(double a, double b, double c) {
    // Calculate the cosine of the angle using the Law of Cosines
    double cos_theta = (a * a + b * b - c * c) / (2 * a * b);
    
    // Calculate the angle in radians
    double theta_radians = acos(cos_theta);
    
    // Convert the angle to degrees
    double theta_degrees = theta_radians * (180.0 / M_PI);
    
    return theta_degrees;
}


ld sector_area1(ld  r, ld angle){   // angle in degrees
   return (angle /  360.0) *  pi * r * r;
}



ld sector_area2(ld r, ld angle){   // angle in arch

         return .5 * angle  *  r *r;
}

ld circle_area(ld r){
      return pi  *r*r;
}


ld Sin(ld a){       //same for cos ,  ...etc
            double radian =a * pi/180;
            return sin(radian);
}

ld triangle_area(ld r  , ld a){
    //cout<<Sin(a)<<" "<<a<<"\n";
        return .50 *r * r* Sin(a);
}


void lets_start_as_we_never_failed(){

               ld  r , a;
               cin>>r>>a;



               cout<<fixed<<setprecision(7)<<sector_area1(r , a)- triangle_area(r , a)<<"\n";
}
// 2 :14
signed main() {

    ios_base::sync_with_stdio(0);
    cin.tie(0);      cout.tie(0);

    int tc=1;
    cin>>tc;
    while(tc--)
        lets_start_as_we_never_failed();

}
///////////////////////////////////////////////////////
solving system of linear equations

const double EPS = 1e-9; // Small epsilon value for floating-point comparison

// Function to perform Gaussian elimination to solve Ax = b
// Returns the solution vector x
vector<double> solveGaussian(vector<vector<double>>& A, vector<double>& b) {
    int n = A.size();
    for (int i = 0; i < n; ++i) {
        // Partial pivoting for numerical stability
        int pivot = i;
        for (int j = i + 1; j < n; ++j) {
            if (abs(A[j][i]) > abs(A[pivot][i]))
                pivot = j;
        }
        swap(A[i], A[pivot]);
        swap(b[i], b[pivot]);

        // Eliminate column i
        for (int j = i + 1; j < n; ++j) {
            double factor = A[j][i] / A[i][i];
            b[j] -= factor * b[i];
            for (int k = i; k < n; ++k)
                A[j][k] -= factor * A[i][k];
        }
    }

    // Back substitution to find x
    vector<double> x(n);
    for (int i = n - 1; i >= 0; --i) {
        x[i] = b[i];
        for (int j = i + 1; j < n; ++j)
            x[i] -= A[i][j] * x[j];
        x[i] /= A[i][i];
    }

    return x;
}

// Example usage
int main() {
    // Example system of equations:
    // 2x + y - z = 8
    // -3x - y + 2z = -11
    // -2x + y + 2z = -3

    vector<vector<double>> A = {{2, 1, -1}, {-3, -1, 2}, {-2, 1, 2}};
    vector<double> b = {8, -11, -3};

    vector<double> x = solveGaussian(A, b);

    cout << "Solution:\n";
    for (int i = 0; i < x.size(); ++i) {
        cout << "x[" << i << "] = " << x[i] << "\n";
    }

    return 0;
}



///////////////////////////////////////////////////////////////
#include <iostream>
#include <cmath>
#include <algorithm>
#include <cstdlib>

// 1. Distance Between Two Points
int distanceSquared(int x1, int y1, int x2, int y2) {
    int dx = x2 - x1;
    int dy = y2 - y1;
    return dx * dx + dy * dy; // Returns the squared distance to avoid floating-point operations
}

//IS point on line  
bool isPointOnLine(int px, int py, int x1, int y1, int x2, int y2) {
    // Cross product of vectors (x2 - x1, y2 - y1) and (px - x1, py - y1)
    int cross = (x2 - x1) * (py - y1) - (y2 - y1) * (px - x1);
    return cross == 0;
}


bool isValidPolygon(const vector<pair<int, int>>& points) {
    int k = points.size();

    // Check all triplets (a, b, c): no 3 points should be collinear
    for (int i = 0; i < k; ++i) {
        for (int j = i + 1; j < k; ++j) {
            for (int l = 0; l < k; ++l) {
                if (l == i || l == j) continue;
                if (isPointOnLine(points[l].first, points[l].second,
                                  points[i].first, points[i].second,
                                  points[j].first, points[j].second)) {
                    return false;
                }
            }
        }
    }

    return true;
}


// 2. Check if a Point is Inside a Circle
bool isPointInCircle(int px, int py, int cx, int cy, int r) {
    return distanceSquared(px, py, cx, cy) <= r * r;
}

// 3. Check if Two Circles Intersect
bool doCirclesIntersect(int x1, int y1, int r1, int x2, int y2, int r2) {
    int distSq = distanceSquared(x1, y1, x2, y2);
    int rSum = r1 + r2;
    int rDiff = std::abs(r1 - r2);
    return (distSq <= rSum * rSum && distSq >= rDiff * rDiff);
}

// 4. Check if a Line Intersects a Circle
bool isTangent(int cx, int cy, int r, int x1, int y1, int x2, int y2) {
    int A = y2 - y1;
    int B = x1 - x2;
    int C = x2 * y1 - x1 * y2;
    int num = std::abs(A * cx + B * cy + C);
    int denom = A * A + B * B; // Avoid sqrt for integer comparison
    return num * num <= r * r * denom; // Compare squared distance with squared radius
}

// 5. Check if a Point is On a Line Segment
bool isPointOnSegment(int px, int py, int x1, int y1, int x2, int y2) {
    if (px < std::min(x1, x2) || px > std::max(x1, x2) || py < std::min(y1, y2) || py > std::max(y1, y2))
        return false;
    int crossProduct = (py - y1) * (x2 - x1) - (px - x1) * (y2 - y1);
    return crossProduct == 0;
}

// 6. Check if Two Line Segments Intersect
bool doSegmentsIntersect(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
    auto orientation = [](int x1, int y1, int x2, int y2, int x3, int y3) {
        int val = (y2 - y1) * (x3 - x2) - (x2 - x1) * (y3 - y2);
        if (val == 0) return 0; // collinear
        return (val > 0) ? 1 : 2; // clock or counterclock wise
    };
    int o1 = orientation(x1, y1, x2, y2, x3, y3);
    int o2 = orientation(x1, y1, x2, y2, x4, y4);
    int o3 = orientation(x3, y3, x4, y4, x1, y1);
    int o4 = orientation(x3, y3, x4, y4, x2, y2);
    if (o1 != o2 && o3 != o4) return true; // General case
    return false; // Special cases (collinear) are not checked here for simplicity
}

// 7. Area of a Triangle Given Vertices
double triangleArea(int x1, int y1, int x2, int y2, int x3, int y3) {
    return std::abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0;
}

// 8. Check if a Point is Inside a Triangle
bool isPointInTriangle(int px, int py, int x1, int y1, int x2, int y2, int x3, int y3) {
    double A = triangleArea(x1, y1, x2, y2, x3, y3);
    double A1 = triangleArea(px, py, x2, y2, x3, y3);
    double A2 = triangleArea(x1, y1, px, py, x3, y3);
    double A3 = triangleArea(x1, y1, x2, y2, px, py);
    return (A == A1 + A2 + A3);
}

// 9. Calculate the Circumference of a Circle
double circleCircumference(int r) {
    return 2 * M_PI * r;
}

// 10. Calculate the Area of a Circle
double circleArea(int r) {
    return M_PI * r * r;
}

// 11. Check if a Point is Inside a Rectangle
bool isPointInRectangle(int px, int py, int rx1, int ry1, int rx2, int ry2) {
    return (px >= rx1 && px <= rx2 && py >= ry1 && py <= ry2);
}

// 12. Check if Two Rectangles Overlap
bool doRectanglesOverlap(int rx1, int ry1, int rx2, int ry2, int rx3, int ry3, int rx4, int ry4) {
    return !(rx2 < rx3 || rx4 < rx1 || ry2 < ry3 || ry4 < ry1);
}

// 13. Calculate the Area of a Rectangle
int rectangleArea(int rx1, int ry1, int rx2, int ry2) {
    return std::abs(rx2 - rx1) * std::abs(ry2 - ry1);
}

// 14. Calculate the Perimeter of a Rectangle
int rectanglePerimeter(int rx1, int ry1, int rx2, int ry2) {
    return 2 * (std::abs(rx2 - rx1) + std::abs(ry2 - ry1));
}

// 15. Calculate the Area of a Parallelogram Given Vertices
double parallelogramArea(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4) {
    return std::abs((x1 * y2 + x2 * y3 + x3 * y4 + x4 * y1) - (y1 * x2 + y2 * x3 + y3 * x4 + y4 * x1)) / 2.0;
}

// Main function for testing
int main() {
    // Example Usage:
    
    // 1. Check if two circles intersect
    int x1 = 0, y1 = 0, r1 = 5;
    int x2 = 8, y2 = 0, r2 = 5;
    if (doCirclesIntersect(x1, y1, r1, x2, y2, r2)) {
        std::cout << "The circles intersect." << std::endl;
    } else {
        std::cout << "The circles do not intersect." << std::endl;
    }

    // 2. Check if a line intersects a circle
    int cx = 0, cy = 0, cr = 5;
    int lx1 = 0, ly1 = 6;
    int lx2 = 8, ly2 = 6;
    if (isTangent(cx, cy, cr, lx1, ly1, lx2, ly2)) {
        std::cout << "The line intersects the circle." << std::endl;
    } else {
        std::cout << "The line does not intersect the circle." << std::endl;
    }

    // 3. Check if a point is inside a triangle
    int px = 1, py = 1
}


//  check if point exist on polygon  on o(n^3)
bool found  (Point p , vector < Point > poloygon ) {
          for (int i =  0;  i  < poloygon.size() ; ++i){
                   for (int j  = 0 ;  j < poloygon.size() ;++j){
                            for (int z = 0  ; z<poloygon.size() ; ++z){
                                      if (i == j ||  j ==  z ||  i==z)
                                                    continue;
                                      if (isPointInTriangle(p.x , p.y , poloygon[i].x , poloygon[i].y ,  poloygon[j].x ,
                                                            poloygon[j].y  , poloygon[z].x , poloygon[z].y ))
                                                return 1 ;
                            }
                   }
          }
          return  0 ;
}

// 9. Calculate the Convex Hull of a Set of Points 

/*
         the min shape that contains all points

*/ 

struct Point {
    int x, y;
    bool operator<(const Point& p) const {
        return x < p.x || (x == p.x && y < p.y);
    }
};

std::vector<Point> convexHull(std::vector<Point>& points) {
    if (points.size() < 3) return points;

    std::sort(points.begin(), points.end());
    std::vector<Point> hull;

    auto cross = [](Point O, Point A, Point B) {
        return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
    };

    for (int i = 0; i < points.size(); ++i) {
        while (hull.size() >= 2 && cross(hull[hull.size() - 2], hull[hull.size() - 1], points[i]) <= 0) {
            hull.pop_back();
        }
        hull.push_back(points[i]);
    }

    for (int i = points.size() - 2, t = hull.size() + 1; i >= 0; --i) {
        while (hull.size() >= t && cross(hull[hull.size() - 2], hull[hull.size() - 1], points[i]) <= 0) {
            hull.pop_back();
        }
        hull.push_back(points[i]);
    }

    hull.pop_back();
    return hull;
}

// 10. Calculate the Area of a Polygon
double polygonArea(const std::vector<Point>& points) {
    int n = points.size();
    double area = 0;
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        area += points[i].x * points[j].y;
        area -= points[i].y * points[j].x;
    }
    return std::abs(area) / 2.0;
}

int main() {
    // Example Usage:
    
    // Check if two circles intersect
    int x1 = 0, y1 = 0, r1 = 5;
    int x2 = 8, y2 = 0, r2 = 5;
    if (doCirclesIntersect(x1, y1, r1, x2, y2, r2)) {
        std::cout << "The circles intersect." << std::endl;
    } else {
        std::cout << "The circles do not intersect." << std::endl;
    }

    // Check if a line intersects a circle
    int cx = 0, cy = 0, cr = 5;
    int lx1 = 0, ly1 = 6;
    int lx2 = 8, ly2 = 6;
    if (isTangent(cx, cy, cr, lx1, ly1, lx2, ly2)) {
        std::cout << "The line intersects the circle." << std::endl;
    } else {
        std::cout << "The line does not intersect the circle." << std::endl;
    }

    // Check if a point is inside a triangle
    int px = 1, py = 1;
    int tx1 = 0, ty1 = 0;
    int tx2 = 5, ty2 = 0;
    int tx3 = 0, ty3 = 5;
    if (isPointInTriangle(px, py, tx1, ty1, tx2, ty2, tx3, ty3)) {
        std::cout << "The point is inside the triangle." << std::endl;
    } else {
        std::cout << "The point is not inside the triangle." << std::endl;
    }

    // Example points for convex hull and polygon area
    std::vector<Point> points = {{0, 0}, {4, 0}, {4, 3}, {0, 3}, {2, 2}};
    
    // Calculate convex hull
    std::vector<Point> hull = convexHull(points);
    std::cout << "Convex Hull Points: ";
    for (const auto& p : hull) {
        std::cout << "(" << p.x << "," << p.y << ") ";
    }
    std::cout << std::endl;
    
    // Calculate area of a polygon
    double area = polygonArea(hull);
    std::cout << "Area of Polygon: " << area << std::endl;

    return 0;
}

const double EPS  = 1e-9;
#define double long double
 
struct Point {
    double x;
    double y;
};
 

// Function to calculate intersection points between two circles
vector<Point> circleIntersection(double x1, double y1, double r1, double x2, double y2, double r2) {
    vector<Point> intersections;
 
    double d = sqrt(distanceSquared(x1, y1, x2, y2));
 
    // No intersection or infinite intersections (circles are the same)
    if (d > r1 + r2 || d < fabs(r1 - r2)) {
        return intersections;
    }
 
    double a = (r1 * r1 - r2 * r2 + d * d) / (2 * d);
    double h = sqrt(r1 * r1 - a * a);
 
    double x0 = x1 + a * (x2 - x1) / d;
    double y0 = y1 + a * (y2 - y1) / d;
 
    intersections.push_back({x0 + h * (y2 - y1) / d, y0 - h * (x2 - x1) / d});
    intersections.push_back({x0 - h * (y2 - y1) / d, y0 + h * (x2 - x1) / d});
 
    return intersections;
}
 
 
// Function to find intersection points between a circle and a line
std::vector<Point> circleLineIntersection(double cx, double cy, double r, double m, double b) {
    std::vector<Point> intersections;
 
    // Line equation: y = mx + b
    // Circle equation: (x - cx)^2 + (y - cy)^2 = r^2
 
    double A = 1 + m * m;
    double B = 2 * (m * (b - cy) - cx);
    double C = cx * cx + (b - cy) * (b - cy) - r * r;
 
    double discriminant = B * B - 4 * A * C;
 
    if (discriminant < 0) {
        return intersections;  // no intersection
    }
 
    double x1 = (-B + std::sqrt(discriminant)) / (2 * A);
    double y1 = m * x1 + b;
    intersections.push_back({x1, y1});
 
    if (discriminant > 0) {
        double x2 = (-B - std::sqrt(discriminant)) / (2 * A);
        double y2 = m * x2 + b;
        intersections.push_back({x2, y2});
    }
 
    return intersections;
}

// Function to find intersection point between two lines
std::vector<Point> lineLineIntersection(double m1, double b1, double m2, double b2) {
    std::vector<Point> intersections;
 
    // Line equations: y = m1 * x + b1 and y = m2 * x + b2
 
    if (m1 == m2) {
        return intersections;  // parallel lines, no intersection
    }
 
    double x = (b2 - b1) / (m1 - m2);
    double y = m1 * x + b1;
 
    intersections.push_back({x, y});
 
    return intersections;
}
 /* 
               Ahmed know them 
*/
struct Point {
    double x, y;
};
 
bool arePointsOnSameCircle(Point p1, Point p2, Point p3) {
    return (p1.y - p2.y) * (p1.x - p3.x) == (p1.y - p3.y) * (p1.x - p2.x);
 
}
 
pair<Point, double> findCircle(Point p1, Point p2, Point p3) {
    double x1 = p1.x, y1 = p1.y;
    double x2 = p2.x, y2 = p2.y;
    double x3 = p3.x, y3 = p3.y;
 
    double a = x1 * (y2 - y3) - y1 * (x2 - x3) + (x2 * y3 - x3 * y2);
    double b = (x1 * x1 + y1 * y1) * (y3 - y2) + (x2 * x2 + y2 * y2) * (y1 - y3) + (x3 * x3 + y3 * y3) * (y2 - y1);
    double c = (x1 * x1 + y1 * y1) * (x2 - x3) + (x2 * x2 + y2 * y2) * (x3 - x1) + (x3 * x3 + y3 * y3) * (x1 - x2);
    double d = (x1 * x1 + y1 * y1) * (x3 * y2 - x2 * y3) + (x2 * x2 + y2 * y2) * (x1 * y3 - x3 * y1) +
               (x3 * x3 + y3 * y3) * (x2 * y1 - x1 * y2);
 
    double xc = -b / (2 * a);
    double yc = -c / (2 * a);
    double radius = std::sqrt((b * b + c * c - 4 * a * d) / (4 * a * a));
 
    Point center = {xc, yc};
    return {center, radius};
}

Point findCircle(Point p1, Point p2) {
    double x1 = p1.x, y1 = p1.y;
    double x2 = p2.x, y2 = p2.y;
 
    // Calculate the midpoint
    double cx = (x1 + x2) / 2;
    double cy = (y1 + y2) / 2;
 
    // Calculate the radius
    double radius = std::sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)) / 2;
 
    Point center = {cx, cy};
    return center;
}

