/*
   صل عل محمد

  دايما احلم ربنا المنان

*/
#include<bits/stdc++.h>
using namespace std  ;

#define int long long //TLE
#define F first
#define S second

const int N   =  3e5+7  , mod= 1e9+7 , p1 =17  , p2=19;
//////////////////////

//without hash o (n*n*log)

//////////////////////////////////////////////////////////
vector <vector<int >  >g(N) , par(N) ;
/*

    each tree has only one or two centres we can get from the diameter
    for each center we have one calonical form such that we can compare two trees  by it and
    also u can compare if asked by difrrent nodes

*/
int power(int a, int b){
        if(b < 0) return 1;
         int res = 1;
         while(b){
                  if(b & 1) res = res * a % mod;
                  a = a * a % mod;
                  b >>= 1;
         }
         return res;
}
pair<int,pair<int,int > >  get_rep(vector<pair<int,pair<int,int >  >  > & cur) { //  (  >> 0 : ) >> 1

        sort(cur.begin() ,  cur.end()) ;
        pair<int,pair<int,int  >  >  ret ;
        int  len=1;
        for (auto &[h1,pr]  : cur) {

                  ret.F+= h1  * power(p1, len) ;
                  ret.S.F+= pr.F  * power(p2, len) ;
                  len+=pr.S;
                  ret.F%=mod;
                  ret.S.F%=mod;
        }
        ret.F+=pow(p1,len) ;
        ret.S.F+=pow(p2,len);
        ret.F%=mod;
        ret.S.F%=mod;
        len++;
        ret.S.S= len ;
        return ret ;

}
pair<int,pair<int,int> >  canonical_form (int nd  , int par) {


          vector <pair<int,pair<int,int > >  >  cur ;
          for (auto &ch  : g[nd]) {
                  if (ch==par)
                        continue   ;

                  cur.push_back(canonical_form(ch , nd)) ;
          }




          pair<int,pair<int,int> > res= get_rep(cur) ;
          return  res;
}



pair<int,pair<int,int> > canonical_form_2(int n ) {

           int deg[n+1]  =  {0};
           queue   <int >  leafes   ;
           vector<vector<pair<int,pair<int,int> >> >  canonical(n+1 )  ;

           for (int  i  =1; i<=n ; ++i) {
                     deg[i]  =  g[i].size();
                     if (deg[i]   <=1){
                                leafes.push(i) ;
                    }
           }



           int rem = n;
           while(rem>2){
               int sz=  leafes.size();
               while(sz--)  {
                        int nd  =  leafes.front();
                        leafes.pop();

                        for (auto &par  : g[nd]) {
                                --deg[par] ;
                                pair<int,pair<int,int> > re=   get_rep(canonical[nd])  ;
                                canonical[par].push_back(re)  ;
                                if (deg[par] ==1){ //it is the only par else they are childs
                                        leafes.push(par)  ;
                                }
                        }
                        --rem ;
               }
           }

           int center1  =  leafes.front() ;    leafes.pop();
           int center2  =  leafes.empty() ? -1  : leafes.front();


           pair<int,pair<int,int> > s1= get_rep(canonical[center1]) ;

           if (center2==-1)
                return s1;

           pair<int,pair<int,int> > s2 =  get_rep(canonical[center2])  ;

           canonical[center1].push_back(s2);
           canonical[center2].push_back(s1)  ;

           return min(get_rep(canonical[center1] ) , get_rep(canonical[center2])) ;

}
void lets_start_as_we_never_failed()   {

          int  n ;
          cin >> n ;

          for (int  i   = 1 ; i < n ;  ++i){
                    g[i].clear() ;
          }

          for (int  i   = 1 ; i < n ;  ++i){
                    int u  , v;
                    cin >> u >>v;
                    g[u] .push_back(v) ;
                    g[v].push_back(u) ;
          }


          pair<int,pair<int,int >  > can1  =  canonical_form_2(n) , can2  ;


          for (int  i   = 1 ; i < n ;  ++i){
                    g[i].clear() ;
          }

          for (int  i   = 1 ; i < n ;  ++i){
                    int u  , v;
                    cin >> u >>v;
                    g[u] .push_back(v) ;
                    g[v].push_back(u) ;
          }


        can2=canonical_form_2(n);

        cout<<((can1==can2) ? "YES\n"  :"NO\n");





}


signed main() {

    ios_base::sync_with_stdio(0);
   cin.tie(0);      cout.tie(0);


    int tc =1;

    while(tc--)
        lets_start_as_we_never_failed();

}
/////////////////////////////////////////////
//with hash
////////////////////////////////////////////////////////////
