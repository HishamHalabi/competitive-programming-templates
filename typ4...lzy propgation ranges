
const int N = 5e5  ,  mod =1e9+7 , p1 =51 ;

int sub(int a , int b   ){
    return (a%mod - b%mod + mod)%mod;
}

vector<int > pw1(N)  ;


int power(int a, int b){

    if(b < 0) return 1;
    int res = 1;
    while(b){
        if(b & 1) res = res * a % mod;
        a = a * a % mod;
        b >>= 1;
    }
    return    res;
}

struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
// http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }
    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map < int , int , custom_hash>  mp ;
int mod_inv(int  b)  {
    if (mp.find(b) != mp.end())return mp[b] ;
    return  mp[b] = power(b   , mod-2)  ;
}
int Div  (int a , int b)  {
    a%=mod ;
    b%=mod;
    return a  * mod_inv(b)%mod ;
}

int geo_seq(int p   , int  n)  {
        int up = (power(p , n)-1 + mod)%mod ;
        int down = (p-1+mod)%mod;
        return Div(up , down) ;
}


#define item int


struct segtree{



    vector <int> op;
    vector <int >  operations;
    vector <item > val ;

    int sz =1;
    segtree(int n){         //empty
        while(sz<n)sz*=2;
        operations.resize(2*sz);
        op.resize(2*sz);
        val.resize(2*sz) ;

        pw1[0] = 1 ;
        for (int  i = 1 ; i <= 2*sz; ++i) {
            pw1[i] = (pw1[i-1]*p1)%mod;
        }
    }
    item Neutral_elemnt = -1 ;
    item merge(item m1  ,  item m2 , int len){
          if (m1 == -1)return m2 ;
          if (m2 == -1) return m1;
          item ret  = m1 ;
          ret+= m2*pw1[len];
          ret%=mod;
          return ret;
    }

    int  operation (int  a , int  b , int x){
            return b;
    }

    void apply(int & a ,int  b , int x){
          a=operation (a, b ,x);
    }
    void update(item & cur  , int  oper , int len){
           cur =   (oper    *    geo_seq(p1   , len) )%mod;
    }
    void reset (int x , int  lx ,int rx){
         if (rx- lx==1){
             val[x] =0 ;
             if (op[x])
              update(val[x] , operations[x]  , 1) ;
         }
         else {
            val[x] = merge(val[2*x+1] , val[2*x+2] , (rx-lx)/2 ) ;
            if (op[x])
              update(val[x] , operations[x] , rx-lx ) ;
         }
    }

    void propagate(int x  , int lx  ,int rx){
          if (rx-lx==1 || !op[x])
            return  ;

          apply(operations[2*x+1], operations[x] , 2*x+1) ;
          apply(operations[2*x+2] ,operations[x] ,2*x+2) ;
          op[2*x+1] =op[2*x+2] =1;
          //clear op of node
          op[x]=0;
          //////////////////////
          int md  =  (lx+rx)/2;
          reset(2*x+1 , lx, md); //عشان هي جالها تغيرات والمفروض انها مرتبطه بتفيراتها وال تحتيها
          reset(2*x+2, md, rx); //same
          reset(x , lx, rx);    //same
          ////////////////////////////////////////////////////
    }


    void change  (int  l , int r,int  oper , int x, int lx ,  int rx){
        propagate(x , lx, rx);
        if (rx<=l || lx>=r)
            return  ;
        if (lx >=l and rx<=r){
                 apply( operations[x] , oper ,x);
                 op[x]  = 1;
                 reset(x  , lx , rx) ;
                return ;
        }
        int md  = (lx+rx)/2;
        change( l, r, oper, 2*x+1 ,lx, md);
        change (l, r, oper ,  2*x+2 , md, rx);

        val[x] = merge(val[2*x+1] , val[2*x+2] , (rx-lx)/2) ;
    }
    void change (int  l ,int r ,int  oper){
        change(l,r , oper,0 ,0,sz);
    }
    item calc( int  l,  int r , int x , int lx , int rx ){

          propagate(x,lx,rx);
          if (lx>=r  ||rx<=l)
            return  Neutral_elemnt ;
          if (lx>= l  and rx<=r){
            return val[x] ;
          }


          int md  =  (lx+rx)/2;
          item res1 = calc( l , r , 2*x+1 ,lx ,md);
          item res2 = calc( l , r, 2*x+2 , md, rx) ;
            int len1 = max(0LL, min(md, r) - max(lx, l));
          return merge(res1 , res2 , len1);

    }
    item calc(int l,  int r){
       return calc(l , r , 0, 0, sz) ;
    }


};
