#include <bits/stdc++.h>
using namespace std;

template <typename T>
struct SparseTable2D {
    int n, m, KX, KY;
    T NEUTRAL;
    function<T(T, T)> merge;
    vector<vector<vector<vector<T>>>> st;

    SparseTable2D(const vector<vector<T>>& a, T neutral, function<T(T, T)> merge)
        : n(a.size()), m(a[0].size()), NEUTRAL(neutral), merge(merge) {
        
        KX = __lg(n) + 1;
        KY = __lg(m) + 1;
        st.assign(KX, vector<vector<vector<T>>>(KY, vector<vector<T>>(n, vector<T>(m))));

        build(a);
    }

    void build(const vector<vector<T>>& a) {
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                st[0][0][i][j] = a[i][j];

        // Build along y-axis first
        for (int ky = 1; ky < KY; ++ky) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j + (1 << ky) <= m; ++j) {
                    st[0][ky][i][j] = merge(st[0][ky - 1][i][j], st[0][ky - 1][i][j + (1 << (ky - 1))]);
                }
            }
        }

        // Build along x-axis
        for (int kx = 1; kx < KX; ++kx) {
            for (int ky = 0; ky < KY; ++ky) {
                for (int i = 0; i + (1 << kx) <= n; ++i) {
                    for (int j = 0; j + (1 << ky) <= m; ++j) {
                        st[kx][ky][i][j] = merge(st[kx - 1][ky][i][j],
                                                 st[kx - 1][ky][i + (1 << (kx - 1))][j]);
                    }
                }
            }
        }
    }

    T query(int x1, int y1, int x2, int y2) {
        int kx = __lg(x2 - x1 + 1);
        int ky = __lg(y2 - y1 + 1);

        T v1 = merge(st[kx][ky][x1][y1], st[kx][ky][x2 - (1 << kx) + 1][y1]);
        T v2 = merge(st[kx][ky][x1][y2 - (1 << ky) + 1],
                     st[kx][ky][x2 - (1 << kx) + 1][y2 - (1 << ky) + 1]);
        return merge(v1, v2);
    }
};
///////////////////////////////////////////////////////////////////////////////

int main() {
    vector<vector<int>> a = {
        {5, 2, 4, 1},
        {8, 7, 3, 6},
        {9, 0, 5, 2},
        {1, 3, 4, 8}
    };

    auto fmin = [](int x, int y) { return min(x, y); };
    SparseTable2D<int> st(a, INT_MAX, fmin);

    cout << st.query(1, 1, 3, 3) << "\n"; // min in submatrix (1..3, 1..3)
}
