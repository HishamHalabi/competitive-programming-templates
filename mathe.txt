 
long long intSqrt(long long n) {
    if (n == 0 || n == 1) return n;  // Base cases

    long long low = 0, high = n, ans = 0;

    while (low <= high) {
        long long mid = low + (high - low) / 2;

        if (mid * mid == n) {
            return mid;  // Exact square root
        } else if (mid * mid < n) {
            low = mid + 1;
            ans = mid;  // Closest square root so far
        } else {
            high = mid - 1;
        }
    }
    
    return ans;  // Return the integer square root

///////////////////////////divisors part//////////////////////////////////////////////
vector<int> p;
void  prime_fact(int n){         // o log (n) * ( log(log(n) :sort)
          p.clear() ;

          while (n%2 == 0){
                    p.push_back(2);   n/=2;
          }

          for (int i = 3; i <= sqrt(n); i = i+2){
                     while (n%i == 0){
                                p.push_back(i);
                                n = n/i;
                     }
         }
         if (n > 2) p.push_back(n);
         sort(p.begin() , p.end()) ;
}
////////////////////////////////////////////prime factors using preprocessing with sieve O ( cntprimes )  , divisors O(cnt divs)
const int MAX_PRE = 1e6+10;
std::vector<int> spf(MAX_PRE + 1);
const int N  =  1e6+1 ;
vector  <int >freq(N) , ans(N , -1);
vector  <vector < int >  > Divs(N)  , primes (N) ;
 
void sieve() {
    for (int i = 2; i <= MAX_PRE; i++) {
        spf[i] = i;
    }
    for (int i = 2; i * i <= MAX_PRE; i++) {
        if (spf[i] == i) {
            for (int j = i * i; j <= MAX_PRE; j += i) {
                if (spf[j] == j) {
                    spf[j] = i;
                }
            }
        }
    }
}
// get prims at O (n of primes with above prepr)
std::vector<int> getPrimeFactors(int n) {
    std::vector<int> primeFactors;
    while (n != 1) {
        primeFactors.push_back(spf[n]);
        n /= spf[n];
    }
    return primeFactors;
}
 
vector<pair<int,int> > val;
vector<int>  divisors;
 
void build(int idx , int cur){
          if (idx==val.size()){
                  divisors.push_back(cur);
                  return  ;
          }
 
          build(idx+1, cur);
          for (int i =1 ; i <=val[idx].S ; ++i){
                   cur*=val[idx].F;
                   build(idx+1 ,cur);
          }
 
}
void  build_divs(int num){          //generate divs in divsiors time
 
              divisors.clear();
              val.clear();
 
              vector <int>  p =  getPrimeFactors(num) ;
              for (int i = 0 ;  i<p.size() ; ++i){
                       int cnt  =1;
                       while(i+1 < p.size() and p[i]==p[i+1] ){
                               i++;
                               cnt++;
                       }
                       val.push_back({p[i] ,cnt});
              }
              build(0 , 1);
}
 
 
 
//////////////////////////////////////////////////////////////////
#define ll long long
 ll lcm(ll a, ll b){

                return a/__gcd(a,b)*b;

 }

 eculiden theorem 
 gcd(a,b) = gcd(max(a,b)%min(a,b) , min(a,b) ) 

exteded eculiden 
 if gcd(a,b)  = g always ther's some x , y (int and maybe neg )   >> a.x + b.y  =g  

int gcd(int a, int b, int& x, int& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int d = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}
The recursive function above returns the GCD and the values of coefficients to x and y (which are passed by reference to the function).

/////////////////////////////////////////////////
int mul_l_r_mod(int l , int r){
                   // sence mul[i] = (mul[i-1]  *cur[i])%mod
                   return (l==0)?mul[r]:mul[r] * mod_inv(mul[l-1]);
}
int div (int a  ,  int  b , int m){
                  return  (a%m * ModInverse(b,m)%m) % m;
}
int sum(int a , int b , int m){ // a ,b maybe negative
               return (a%m +b%m + m) % m;
}
int sub(int a , int b , int m){ // a ,b maybe negative
               return (a%m - b%m + m) % m;
}
ll nPr(ll n,ll r, ll mod){

                               ll ret = 1 ;
                               for(int i=n-r+1;i<=n;++i) ret =(ret*i)%mod;
                               return ret ;

}
int factorial[N], ways[N];
int power(int a, int b){
        if(b < 0) return 1;
         int res = 1;
         while(b){
                  if(b & 1) res = res * a % mod;
                  a = a * a % mod;
                  b >>= 1;
         }
         return res;
}
int mod_inv(int n){
         return power(n, mod - 2);
 }

int nCr(int n, int a){
        if(n < a) return 0;
        int top = factorial[n];
        int bot = mod_inv(factorial[a]) * mod_inv(factorial[n - a]); bot %= mod;
        int res = top * bot % mod;
        return res;
}

 void init(){
        factorial[0] = 1;
        for(int i = 1; i < N; i++){
                 factorial[i] = factorial[i - 1] * i;
                 factorial[i] %= mod;
        }
  }



};
////////////////////////////catlan Numbres // 

The Catalan number  
$C_n$  is the solution for

Number of correct bracket sequence consisting of   
$n$  opening and  
$n$  closing brackets.
The number of rooted full binary trees with  
$n + 1$  leaves (vertices are not numbered). A rooted binary tree is full if every vertex has either two children or no children.
The number of ways to completely parenthesize  
$n + 1$  factors.
The number of triangulations of a convex polygon with  
$n + 2$  sides (i.e. the number of partitions of polygon into disjoint triangles by using the diagonals).
The number of ways to connect the  
$2n$  points on a circle to form  
$n$  disjoint chords.
The number of non-isomorphic full binary trees with  
$n$  internal nodes (i.e. nodes having at least one son).
The number of monotonic lattice paths from point  
$(0, 0)$  to point  
$(n, n)$  in a square lattice of size  
$n \times n$ , which do not pass above the main diagonal (i.e. connecting  
$(0, 0)$  to  
$(n, n)$ ).
Number of permutations of length  
$n$  that can be stack sorted (i.e. it can be shown that the rearrangement is stack sorted if and only if there is no such index  
$i < j < k$ , such that  
$a_k < a_i < a_j$  ).
The number of non-crossing partitions of a set of  
$n$  elements.
The number of ways to cover the ladder  
$1 \ldots n$  using  
$n$  rectangles (The ladder consists of  
$n$  columns, where  
$i^{th}$  column has a height  
$i$ ).

int Cat(int n) { // nCr(2*n,n) / (n+1)
    return (long long) nCr(2 * n, n) * mod_inv(n+1) %mod; 
}

